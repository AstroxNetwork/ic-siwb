type Address = text;
type CanisterPublicKey = PublicKey;
type Delegation = record {
  pubkey : PublicKey;
  targets : opt vec principal;
  expiration : Timestamp;
};
type GetAddressResponse = variant { Ok : Address; Err : text };
type GetDelegationResponse = variant { Ok : SignedDelegation; Err : text };
type GetPrincipalResponse = variant { Ok : Principal; Err : text };
type LoginDetails = record {
  user_canister_pubkey : CanisterPublicKey;
  expiration : Timestamp;
};
type LoginResponse = variant { Ok : LoginDetails; Err : text };
type PrepareLoginResponse = variant { Ok : SiwbMessage; Err : text };
type Principal = blob;
type PublicKey = blob;
type PublickeyHex = text;
type RuntimeFeature = variant {
  IncludeUriInSeed;
  DisableEthToPrincipalMapping;
  DisablePrincipalToEthMapping;
};
type SessionKey = PublicKey;
type SettingsInput = record {
  uri : text;
  runtime_features : opt vec RuntimeFeature;
  domain : text;
  statement : opt text;
  scheme : opt text;
  salt : text;
  network : opt text;
  session_expires_in : opt nat64;
  targets : opt vec text;
  sign_in_expires_in : opt nat64;
};
type SignMessageType = variant { Bip322Simple; ECDSA };
type SignedDelegation = record { signature : blob; delegation : Delegation };
type SiwbMessage = text;
type SiwbSignature = text;
type String = text;
type Timestamp = nat64;
service : {
  get_address : (Principal, String) -> (GetAddressResponse) query;
  get_caller_address : (opt String) -> (GetAddressResponse) query;
  get_principal : (Address) -> (GetPrincipalResponse) query;
  siwb_get_delegation : (Address, SessionKey, Timestamp) -> (
      GetDelegationResponse,
    ) query;
  siwb_login : (
      SiwbSignature,
      Address,
      PublickeyHex,
      SessionKey,
      SignMessageType,
    ) -> (LoginResponse);
  siwb_prepare_login : (Address) -> (PrepareLoginResponse);
}